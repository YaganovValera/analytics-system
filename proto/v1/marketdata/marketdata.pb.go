// proto/v1/marketdata.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: marketdata/marketdata.proto

package marketdatapb

import (
	common "github.com/YaganovValera/analytics-system/proto/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MarketData represents a raw trade event.
type MarketData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price         float64                `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	BidPrice      float64                `protobuf:"fixed64,4,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	AskPrice      float64                `protobuf:"fixed64,5,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	Volume        float64                `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
	TradeId       string                 `protobuf:"bytes,7,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketData) Reset() {
	*x = MarketData{}
	mi := &file_marketdata_marketdata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketData) ProtoMessage() {}

func (x *MarketData) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_marketdata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketData.ProtoReflect.Descriptor instead.
func (*MarketData) Descriptor() ([]byte, []int) {
	return file_marketdata_marketdata_proto_rawDescGZIP(), []int{0}
}

func (x *MarketData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MarketData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketData) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketData) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketData) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketData) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketData) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

// OrderBookLevel is one price level in the order book.
type OrderBookLevel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         float64                `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Quantity      float64                `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookLevel) Reset() {
	*x = OrderBookLevel{}
	mi := &file_marketdata_marketdata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookLevel) ProtoMessage() {}

func (x *OrderBookLevel) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_marketdata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookLevel.ProtoReflect.Descriptor instead.
func (*OrderBookLevel) Descriptor() ([]byte, []int) {
	return file_marketdata_marketdata_proto_rawDescGZIP(), []int{1}
}

func (x *OrderBookLevel) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderBookLevel) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// OrderBookSnapshot is a snapshot of top-N levels.
type OrderBookSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Bids          []*OrderBookLevel      `protobuf:"bytes,3,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks          []*OrderBookLevel      `protobuf:"bytes,4,rep,name=asks,proto3" json:"asks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookSnapshot) Reset() {
	*x = OrderBookSnapshot{}
	mi := &file_marketdata_marketdata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookSnapshot) ProtoMessage() {}

func (x *OrderBookSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_marketdata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookSnapshot.ProtoReflect.Descriptor instead.
func (*OrderBookSnapshot) Descriptor() ([]byte, []int) {
	return file_marketdata_marketdata_proto_rawDescGZIP(), []int{2}
}

func (x *OrderBookSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OrderBookSnapshot) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderBookSnapshot) GetBids() []*OrderBookLevel {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OrderBookSnapshot) GetAsks() []*OrderBookLevel {
	if x != nil {
		return x.Asks
	}
	return nil
}

// MarketDataEvent wraps a MarketData or a stream error.
type MarketDataEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*MarketDataEvent_Data
	//	*MarketDataEvent_StreamError
	Payload       isMarketDataEvent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketDataEvent) Reset() {
	*x = MarketDataEvent{}
	mi := &file_marketdata_marketdata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDataEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataEvent) ProtoMessage() {}

func (x *MarketDataEvent) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_marketdata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataEvent.ProtoReflect.Descriptor instead.
func (*MarketDataEvent) Descriptor() ([]byte, []int) {
	return file_marketdata_marketdata_proto_rawDescGZIP(), []int{3}
}

func (x *MarketDataEvent) GetPayload() isMarketDataEvent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MarketDataEvent) GetData() *MarketData {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataEvent_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *MarketDataEvent) GetStreamError() *common.StreamError {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataEvent_StreamError); ok {
			return x.StreamError
		}
	}
	return nil
}

type isMarketDataEvent_Payload interface {
	isMarketDataEvent_Payload()
}

type MarketDataEvent_Data struct {
	Data *MarketData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type MarketDataEvent_StreamError struct {
	StreamError *common.StreamError `protobuf:"bytes,2,opt,name=stream_error,json=streamError,proto3,oneof"`
}

func (*MarketDataEvent_Data) isMarketDataEvent_Payload() {}

func (*MarketDataEvent_StreamError) isMarketDataEvent_Payload() {}

// OrderBookEvent wraps an OrderBookSnapshot or a stream error.
type OrderBookEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*OrderBookEvent_Data
	//	*OrderBookEvent_StreamError
	Payload       isOrderBookEvent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookEvent) Reset() {
	*x = OrderBookEvent{}
	mi := &file_marketdata_marketdata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookEvent) ProtoMessage() {}

func (x *OrderBookEvent) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_marketdata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookEvent.ProtoReflect.Descriptor instead.
func (*OrderBookEvent) Descriptor() ([]byte, []int) {
	return file_marketdata_marketdata_proto_rawDescGZIP(), []int{4}
}

func (x *OrderBookEvent) GetPayload() isOrderBookEvent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *OrderBookEvent) GetData() *OrderBookSnapshot {
	if x != nil {
		if x, ok := x.Payload.(*OrderBookEvent_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *OrderBookEvent) GetStreamError() *common.StreamError {
	if x != nil {
		if x, ok := x.Payload.(*OrderBookEvent_StreamError); ok {
			return x.StreamError
		}
	}
	return nil
}

type isOrderBookEvent_Payload interface {
	isOrderBookEvent_Payload()
}

type OrderBookEvent_Data struct {
	Data *OrderBookSnapshot `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type OrderBookEvent_StreamError struct {
	StreamError *common.StreamError `protobuf:"bytes,2,opt,name=stream_error,json=streamError,proto3,oneof"`
}

func (*OrderBookEvent_Data) isOrderBookEvent_Payload() {}

func (*OrderBookEvent_StreamError) isOrderBookEvent_Payload() {}

var File_marketdata_marketdata_proto protoreflect.FileDescriptor

var file_marketdata_marketdata_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xd3, 0x01, 0x0a, 0x11,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x61, 0x73, 0x6b,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x32, 0xb5, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x0f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x59, 0x61, 0x67, 0x61, 0x6e, 0x6f, 0x76, 0x56,
	0x61, 0x6c, 0x65, 0x72, 0x61, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x3b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_marketdata_marketdata_proto_rawDescOnce sync.Once
	file_marketdata_marketdata_proto_rawDescData []byte
)

func file_marketdata_marketdata_proto_rawDescGZIP() []byte {
	file_marketdata_marketdata_proto_rawDescOnce.Do(func() {
		file_marketdata_marketdata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_marketdata_marketdata_proto_rawDesc), len(file_marketdata_marketdata_proto_rawDesc)))
	})
	return file_marketdata_marketdata_proto_rawDescData
}

var file_marketdata_marketdata_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_marketdata_marketdata_proto_goTypes = []any{
	(*MarketData)(nil),            // 0: market.marketdata.MarketData
	(*OrderBookLevel)(nil),        // 1: market.marketdata.OrderBookLevel
	(*OrderBookSnapshot)(nil),     // 2: market.marketdata.OrderBookSnapshot
	(*MarketDataEvent)(nil),       // 3: market.marketdata.MarketDataEvent
	(*OrderBookEvent)(nil),        // 4: market.marketdata.OrderBookEvent
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*common.StreamError)(nil),    // 6: market.common.StreamError
	(*emptypb.Empty)(nil),         // 7: google.protobuf.Empty
}
var file_marketdata_marketdata_proto_depIdxs = []int32{
	5,  // 0: market.marketdata.MarketData.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 1: market.marketdata.OrderBookSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 2: market.marketdata.OrderBookSnapshot.bids:type_name -> market.marketdata.OrderBookLevel
	1,  // 3: market.marketdata.OrderBookSnapshot.asks:type_name -> market.marketdata.OrderBookLevel
	0,  // 4: market.marketdata.MarketDataEvent.data:type_name -> market.marketdata.MarketData
	6,  // 5: market.marketdata.MarketDataEvent.stream_error:type_name -> market.common.StreamError
	2,  // 6: market.marketdata.OrderBookEvent.data:type_name -> market.marketdata.OrderBookSnapshot
	6,  // 7: market.marketdata.OrderBookEvent.stream_error:type_name -> market.common.StreamError
	7,  // 8: market.marketdata.MarketDataService.StreamMarketData:input_type -> google.protobuf.Empty
	7,  // 9: market.marketdata.MarketDataService.StreamOrderBook:input_type -> google.protobuf.Empty
	3,  // 10: market.marketdata.MarketDataService.StreamMarketData:output_type -> market.marketdata.MarketDataEvent
	4,  // 11: market.marketdata.MarketDataService.StreamOrderBook:output_type -> market.marketdata.OrderBookEvent
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_marketdata_marketdata_proto_init() }
func file_marketdata_marketdata_proto_init() {
	if File_marketdata_marketdata_proto != nil {
		return
	}
	file_marketdata_marketdata_proto_msgTypes[3].OneofWrappers = []any{
		(*MarketDataEvent_Data)(nil),
		(*MarketDataEvent_StreamError)(nil),
	}
	file_marketdata_marketdata_proto_msgTypes[4].OneofWrappers = []any{
		(*OrderBookEvent_Data)(nil),
		(*OrderBookEvent_StreamError)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_marketdata_marketdata_proto_rawDesc), len(file_marketdata_marketdata_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_marketdata_marketdata_proto_goTypes,
		DependencyIndexes: file_marketdata_marketdata_proto_depIdxs,
		MessageInfos:      file_marketdata_marketdata_proto_msgTypes,
	}.Build()
	File_marketdata_marketdata_proto = out.File
	file_marketdata_marketdata_proto_goTypes = nil
	file_marketdata_marketdata_proto_depIdxs = nil
}
