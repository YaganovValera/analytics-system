// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: marketdata.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MarketDataService_PublishMarketData_FullMethodName = "/marketdata.v1.MarketDataService/PublishMarketData"
)

// MarketDataServiceClient is the client API for MarketDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MarketDataService предоставляет RPC для отправки рыночных данных
type MarketDataServiceClient interface {
	// Клиентский стриминг: Collector шлёт последовательность MarketData
	PublishMarketData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MarketData, PublishResponse], error)
}

type marketDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketDataServiceClient(cc grpc.ClientConnInterface) MarketDataServiceClient {
	return &marketDataServiceClient{cc}
}

func (c *marketDataServiceClient) PublishMarketData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MarketData, PublishResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[0], MarketDataService_PublishMarketData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MarketData, PublishResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_PublishMarketDataClient = grpc.ClientStreamingClient[MarketData, PublishResponse]

// MarketDataServiceServer is the server API for MarketDataService service.
// All implementations must embed UnimplementedMarketDataServiceServer
// for forward compatibility.
//
// MarketDataService предоставляет RPC для отправки рыночных данных
type MarketDataServiceServer interface {
	// Клиентский стриминг: Collector шлёт последовательность MarketData
	PublishMarketData(grpc.ClientStreamingServer[MarketData, PublishResponse]) error
	mustEmbedUnimplementedMarketDataServiceServer()
}

// UnimplementedMarketDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarketDataServiceServer struct{}

func (UnimplementedMarketDataServiceServer) PublishMarketData(grpc.ClientStreamingServer[MarketData, PublishResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PublishMarketData not implemented")
}
func (UnimplementedMarketDataServiceServer) mustEmbedUnimplementedMarketDataServiceServer() {}
func (UnimplementedMarketDataServiceServer) testEmbeddedByValue()                           {}

// UnsafeMarketDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketDataServiceServer will
// result in compilation errors.
type UnsafeMarketDataServiceServer interface {
	mustEmbedUnimplementedMarketDataServiceServer()
}

func RegisterMarketDataServiceServer(s grpc.ServiceRegistrar, srv MarketDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedMarketDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarketDataService_ServiceDesc, srv)
}

func _MarketDataService_PublishMarketData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarketDataServiceServer).PublishMarketData(&grpc.GenericServerStream[MarketData, PublishResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarketDataService_PublishMarketDataServer = grpc.ClientStreamingServer[MarketData, PublishResponse]

// MarketDataService_ServiceDesc is the grpc.ServiceDesc for MarketDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketdata.v1.MarketDataService",
	HandlerType: (*MarketDataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishMarketData",
			Handler:       _MarketDataService_PublishMarketData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "marketdata.proto",
}
