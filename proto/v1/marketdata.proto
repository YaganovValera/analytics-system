// proto/v1/marketdata.proto
syntax = "proto3";

package market.marketdata;

option go_package = "github.com/YaganovValera/analytics-system/proto/v1/generate/marketdata;marketdatapb";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "proto/v1/common.proto";

// Сырые данные по тикеру.
message MarketData {
  // Резервируем удалённое поле и будущие расширения
  reserved 2;
  reserved "timestamp_unix_ms";
  reserved 100 to 199;

  // Время события с наносекундами.
  google.protobuf.Timestamp timestamp = 1;
  // Торговый символ, например \"BTCUSDT\".
  string symbol                   = 3;
  // Цена сделки.
  double price                    = 4;
  // Текущая лучшая цена заявки на покупку.
  double bid_price                = 5;
  // Текущая лучшая цена заявки на продажу.
  double ask_price                = 6;
  // Объём сделки.
  double volume                   = 7;
  // Идентификатор сделки (если есть).
  string trade_id                 = 8;
}

// Один уровень книги заявок.
message OrderBookLevel {
  reserved 100 to 199;

  // Цена уровня.
  double price    = 1;
  // Объём (количество).
  double quantity = 2;
}

// Снимок топ-N уровней книги заявок.
message OrderBookSnapshot {
  reserved 100 to 199;

  // Время снятия снимка.
  google.protobuf.Timestamp timestamp = 1;
  // Торговый символ.
  string                     symbol    = 2;
  // Список бидов (макс. N уровней).
  repeated OrderBookLevel    bids      = 3;
  // Список асков (макс. N уровней).
  repeated OrderBookLevel    asks      = 4;
}

// Событие потока MarketData.
message MarketDataEvent {
  reserved 100 to 199;

  oneof payload {
    // Данные тикера.
    MarketData              data  = 1;
    // Ошибка потока.
    market.common.StreamError error = 2;
  }
}

// Событие потока OrderBook.
message OrderBookEvent {
  reserved 100 to 199;

  oneof payload {
    // Снимок книги.
    OrderBookSnapshot        data  = 1;
    // Ошибка потока.
    market.common.StreamError error = 2;
  }
}

// Сервис «сырых» данных рынка.
service MarketDataService {
  // Поток рыночных данных (тикеры).
  rpc StreamMarketData(google.protobuf.Empty) returns (stream MarketDataEvent);
  // Поток снимков книги заявок.
  rpc StreamOrderBook(google.protobuf.Empty) returns (stream OrderBookEvent);
}