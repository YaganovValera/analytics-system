# github.com/YaganovValera/analytics-system/deploy/docker-compose.yml
networks:
  backend:

services:
  # ------------------------------------------------------------------------
  #  Core infra
  # ------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5


  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_ENABLE_ADMIN_SERVER: "no"
    ports:
      - "2181:2181"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "echo", "ruok"]
      interval: 5s
      timeout: 3s
      retries: 5

  kafka:
    image: bitnami/kafka:3.5
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9092:9092"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 5s
      timeout: 3s
      retries: 10

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: analytics
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user"]
      interval: 5s
      timeout: 3s
      retries: 10

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command:
      - --config=/etc/otel-collector-config.yaml
    volumes:
      - ./monitoring/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "13133:13133" # Health-check
    networks:
      - backend
   
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    networks:
      - backend

  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: jaeger
    ports:
      - "16686:16686" # UI
      - "14250:14250" # OTLP/gRPC
    networks:
      - backend

  # ------------------------------------------------------------------------
  #  Application services
  # ------------------------------------------------------------------------

  market-data-collector:
    build:
      context: ../
      dockerfile: services/market-data-collector/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      COLLECTOR_SERVICE_NAME: market-data-collector
      COLLECTOR_SERVICE_VERSION: "v1.0.0"
      COLLECTOR_KAFKA_BROKERS: kafka:9092
      COLLECTOR_TELEMETRY_OTEL_ENDPOINT: otel-collector:4317
      COLLECTOR_TELEMETRY_INSECURE: "true"
      OTEL_SERVICE_NAME: market-data-collector
      OTEL_EXPORTER_OTLP_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: "1.0"
    restart: always
    networks:
      - backend

  preprocessor:
    build:
      context: ../
      dockerfile: services/preprocessor/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      PREPROCESSOR_SERVICE_NAME: preprocessor
      PREPROCESSOR_SERVICE_VERSION: "v1.0.0"
      PREPROCESSOR_KAFKA_BROKERS: kafka:9092
      PREPROCESSOR_KAFKA_CONSUMER_GROUP_ID: preprocessor
      PREPROCESSOR_TIMESCALEDB_DSN: postgres://user:pass@timescaledb:5432/analytics?sslmode=disable
      PREPROCESSOR_TIMESCALEDB_MIGRATIONS_DIR: /app/migrations/timescaledb
      PREPROCESSOR_TELEMETRY_OTEL_ENDPOINT: otel-collector:4317
      PREPROCESSOR_TELEMETRY_INSECURE: "true"

      OTEL_SERVICE_NAME: preprocessor
      OTEL_EXPORTER_OTLP_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: "1.0"
    restart: always
    networks:
      - backend

  analytics-api:
    build:
      context: ../
      dockerfile: services/analytics-api/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      ANALYTICS_SERVICE_NAME: analytics-api
      ANALYTICS_SERVICE_VERSION: "v1.0.0"

      ANALYTICS_KAFKA_BROKERS: kafka:9092
      ANALYTICS_KAFKA_GROUP_ID: analytics-api
      ANALYTICS_KAFKA_VERSION: "2.8.0"
      
      ANALYTICS_TOPIC_BASE: candles

      ANALYTICS_TIMESCALEDB_DSN: postgres://user:pass@timescaledb:5432/analytics?sslmode=disable

      ANALYTICS_TELEMETRY_OTEL_ENDPOINT: otel-collector:4317
      ANALYTICS_TELEMETRY_INSECURE: "true"
      ANALYTICS_TELEMETRY_SERVICE_NAME: analytics-api

      OTEL_SERVICE_NAME: analytics-api
      OTEL_EXPORTER_OTLP_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_TRACES_SAMPLER: parentbased_traceidratio
      OTEL_TRACES_SAMPLER_ARG: "1.0"
    restart: always
    networks:
      - backend
